@page "/completeQuiz/{QuizId:int}"

@inject QuizManager quizManager
@inject Client.IApiClient client
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

@using Models.Api
@using Client.State;

<Alert Color="Color.Success" IsShow="@completed">Thanks and good luck!</Alert>
@if (response == null)
{
    <div>Loading</div>
}
else
{
    <Heading Size="HeadingSize.Is2">@response.Quiz.Name</Heading>
    <Container>
        <TextEdit @bind-Text="@response.Name" Placeholder="Enter your name" />
        <Button Color="Color.Primary" Visibility="string.IsNullOrWhiteSpace(response.Name) ? Visibility.Always : Visibility.Never">Go</Button>
    </Container>
    <EditForm OnValidSubmit="@HandleSubmit" Model="@response">
        @if (response != null && !string.IsNullOrWhiteSpace(response.Name))
        {
            <Heading Size="HeadingSize.Is3">OK @response.Name, are you a winner?</Heading>

            <ListGroup>
                @foreach (var answer in response.Answers)
                {<Card Margin="Margin.Is4" Background="Background.Light">
                        <ListGroupItem>
                            <Heading Size="HeadingSize.Is4">@answer.Question.Text :</Heading>
                            <Container>
                                <ListGroup>
                                    @foreach (var option in answer.Question.Options)
                                    {
                                        <ListGroupItem>
                                            <CheckEdit CheckedChanged="() => Chosen(answer, option)"
                                                       Checked="@(answer.Option?.Id == option.Id)"
                                                       RadioGroup="@answer.Question.Id.ToString()">
                                                @option.Text
                                            </CheckEdit>
                                        </ListGroupItem>
                                    }
                                </ListGroup>
                            </Container>
                        </ListGroupItem>
                    </Card>
                }
            </ListGroup>
            <Button IsDisabled="!completed && response.Answers.Any(a => a.Option == null)"
                    IsLoading="saving"
                    Type="ButtonType.Submit"
                    Color="Color.Secondary">
                Submit
            </Button>
        }
    </EditForm>
}

@functions{
    public QuizResponseDto response;

    [Parameter]
    public int QuizId { get; set; }
    bool saving = false;
    bool completed = false;

    protected override void OnInitialized()
    {
        response = new QuizResponseDto(null);
        quizManager.OnChange += () =>
        {
            var quiz = quizManager.Quizes.SingleOrDefault(q => q.Id == QuizId) ?? throw new Exception($"The quiz id {QuizId} wasn't found");
            response = new QuizResponseDto(quiz);
        };
    }

    private void Chosen(AnswerDto answer, OptionDto option)
    {
        answer.Option = option;
    }

    private async Task HandleSubmit()
    {
        saving = true;
        await client.PutAsync<QuizResponseDto>("api/quiz/responses", response);
        saving = false;
        completed = true;
    }
}
