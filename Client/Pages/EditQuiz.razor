@page "/edit/{Id:int}"

@using Models.Api
@using Client.State;
@using FluentValidation.Blazor

@inject IQuizManager quizManager
@inject IApiClient  client
@inject IJSRuntime JsRuntime;

@if (Quiz == null)
{
    <Loading />
}
else
{
    <span id="alert"/>
    <Alert Color="Color.Success" IsDismisable="true" IsShow="@saved">Quiz '@Quiz.Name' has been saved.</Alert>
    <EditForm OnValidSubmit="HandleSubmit" Model="@Quiz">
        <FluentValidationValidator />
        <Field>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <InputText placeholder="Question name" class="form-control" @bind-Value="@Quiz.Name" />
            </FieldBody>
        </Field>
        <ValidationMessage For="@(() => Quiz.Name)" />

        @foreach (var question in Quiz.Questions)
        {
            <Card Margin="Margin.Is4" Background="Background.Light">
                <Field>
                    <EditQuestion RemoveQuestion="@RemoveQuestion" Question="@question" />
                </Field>
            </Card>
        }

        <ValidationMessage For="@(() => Quiz.Questions)" />
        <Button Clicked="@AddQuestion" Color="Color.Primary"><Icon Name="IconName.New" />Add question</Button>
        <Button Type="ButtonType.Submit" Color="Color.Secondary">Save</Button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public QuizDto Quiz { get; set; }

    bool saved;

    public void AddQuestion()
    {
        Quiz.Questions.Add(new QuestionDto { });
    }

    public void RemoveQuestion(QuestionDto question)
    {
        Quiz.Questions.Remove(question);
        base.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Quiz = await quizManager.GetQuiz(Id) ?? new QuizDto();
    }

    private void HandleSubmit()
    {
        if (Quiz.Id == 0)
        {
            client.PutAsync<QuizDto>("api/quiz", Quiz);
            quizManager.Quizes.Add(Quiz);
        }
        else
        {
            client.PostAsync<QuizDto>("api/quiz", Quiz);
        }

        saved = true;
        JsRuntime.InvokeAsync<bool>("scrollIntoView", "alert");
    }
}
