@page "/quizes"
@inject Client.IApiClient client
@using Models.Api
@using System.Linq

<h1>Admin</h1>

@if (quizes == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    @if (!quizes.Any())
    {
        <p><span>There aren't quizes at the moment, add one below</span></p>
    }
    else
    {
        <ul>
            @foreach (var quiz in quizes)
            {
                <li><a @onclick="@(() => ToggleQuizFields(quiz))">@quiz.Name</a></li>
            }
        </ul>
    }
     
    <EditForm OnValidSubmit="@HandleSubmit" Model="@newQuiz">
        <FluentValidationValidator />
        <button class="btn btn-primary" @onclick="@(() => ToggleQuizFields())">Add quiz</button>

        <div hidden="@(!showAddQuiz)">
            <EditQuiz quiz="@newQuiz" />
        </div>
        <input type="submit" class="btn btn-success" value="Submit" />
    </EditForm>
}

@code {
    IList<QuizDto> quizes;

    private bool showAddQuiz { get; set; } = false;

    public QuizDto newQuiz { get; set; } = new QuizDto { Questions = new List<QuestionDto>() };

    protected override async Task OnInitializedAsync()
    {
        await GetQuizData();
        Console.WriteLine(State.GlobalState.IpAddress);
    }

    async Task<IList<QuizDto>> GetQuizData()
    {
        quizes = await client.GetAsync<List<QuizDto>>("api/quiz");
        return quizes;
    }

    void ToggleQuizFields(QuizDto quiz = null)
    {
        showAddQuiz = true;
        newQuiz = quiz ?? new QuizDto { Questions = new List<QuestionDto>() };
        Console.WriteLine("New quiz");
    }

    async Task<bool> HandleSubmit()
    {
        Console.WriteLine("Submitted");
        if (showAddQuiz)
        {
            if (newQuiz.Id == 0)
            {
                await client.PutAsync<QuizDto>("api/quiz", newQuiz);
                quizes.Add(newQuiz);
            }
            else
            {
                await client.PostAsync<QuizDto>("api/quiz", newQuiz);
            }

            showAddQuiz = false;
            return true;
        }

        Console.WriteLine("There are no quizes");
        return false;
    }
}